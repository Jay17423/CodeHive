   aap.jsx



   import React, { useState, useEffect } from "react";
import "./App.css";
import io from "socket.io-client";
import Editor from "@monaco-editor/react";

const socket = io("http://localhost:5050");

const App = () => {
  const [joined, setJoined] = useState(false);
  const [roomId, setRoomId] = useState("");
  const [userName, setUserName] = useState("");
  const [language, setLanguage] = useState("javascript"); // default language as JavaScript
  const [code, setCode] = useState("// start code here ");
  const [copySuccess, setCopySuccess] = useState("");
  const [users, setUsers] = useState([]);
  const [typing, setTyping] = useState([]);
  
  useEffect(() => {
    socket.on("userJoined", (users) => {
      setUsers(users);
    });

    // code update functionality
    socket.on("codeUpdate", (newCode) => {
      setCode(newCode);
    });

    // typing indicator functionality
    socket.on("userTyping", (user) => {
      setTyping(`${user.slice(0, 8)}... is Typing`);
      setTimeout(() => setTyping(""), 6000); // empty it after 2 seconds
    });

    // for language change
    socket.on("languageUpdate", (newLanguage) => {
      setLanguage(newLanguage);
    });

    // cleanup function for socket off
    return () => {
      socket.off("userJoined");
      socket.off("codeUpdate");
      socket.off("userTyping");
      socket.off("languageUpdate");
    };
  }, []);

  // useEffect tp handle room on reload the page

  useEffect(() => {
    const handleBeforeUnload = () => {
      socket.emit("leaveRoom");
    };

    window.addEventListener("beforeunload", handleBeforeUnload);

    return () => {
      window.removeEventListener("beforeunload", handleBeforeUnload);
    };
  }, []);

  // useEffect to listen for redirect event

  useEffect(() => {
    socket.on("redirectToJoinPage", () => {
      setJoined(false);
      setRoomId("");
      setUserName("");
      setCode("// start code here");
      setLanguage("javascript");
    });

    return () => {
      socket.off("redirectToJoinPage");
    };
  }, []);

  /*   function for button onclick   */
  const joinRoom = () => {
    if (roomId && userName) {
      socket.emit("join", { roomId, userName });
      setJoined(true);
    }
  };

  /*   function for leave room    */
  
  const leaveRoom = () => {
    socket.emit("leaveRoom");
  };

  /* function for copy Room Id  */
  const copyRoomId = () => {
    navigator.clipboard.writeText(roomId);
    setCopySuccess("Copied!");
    setTimeout(() => setCopySuccess(""), 2000);
  };

  // function to handle the edited code on the code editor
  const handleCodeChange = (newCode) => {
    setCode(newCode);
    socket.emit("codeChange", { roomId, code: newCode });
    socket.emit("typing", { roomId, userName }); // typing indicator
  };

  // function to handle the language change
  const handleLanguageChange = (e) => {
    const newLanguage = e.target.value;
    setLanguage(newLanguage);
    socket.emit("languageChange", { roomId, language: newLanguage });
  };

  if (!joined) {
    return (
      <div className="join-container">
        <div className="join-form">
          {/* join form  */}

          <h1> Join Code Room </h1>
          {/* Get Room id from the user to join him in that room */}
          <div className="input-container">
            <input
              type="text"
              placeholder="Room Id"
              value={roomId}
              onChange={(e) => setRoomId(e.target.value)}
            />
          </div>
          {/* get user name */}
          <div className="input-container">
            <input
              type="text"
              placeholder="User Name"
              value={userName}
              onChange={(e) => setUserName(e.target.value)}
            />
          </div>
          <button onClick={joinRoom}> Join Room </button>
        </div>
      </div>
    );
  }

  return (
    <div className="editor-container">
      <div className="sidebar">
        <div className="room-info">
          <h2> Code Room : {roomId} </h2>
          <button className="copy-button" onClick={copyRoomId}>
            Copy Id
          </button>
          {/* if copied then show it  */}
          {copySuccess && <span className="copy-success">{copySuccess}</span>}
        </div>
        <h3>Users in Room</h3>
        <ul>
          {users.map((user, index) => (
            <li key={index}> {user.slice(0, 8)}..</li>
          ))}
        </ul>
        <p className="typing-indicator"> {typing} </p>
        {/* to choose the language of our choice */}
        <select
          className="language-selector"
          value={language}
          onChange={handleLanguageChange}
        >
          <option value="javascript">JavaScript</option>
          <option value="cpp">C++</option>
          <option value="c">C</option>
          <option value="python">Python</option>
          <option value="java">Java</option>
        </select>
        <button className="leave-button" onClick={leaveRoom}>
          Leave Room
        </button>
      </div>
      <div className="editor-wrapper">
        <Editor
          height={"100%"}
          defaultLanguage={language}
          language={language}
          value={code}
          onChange={handleCodeChange}
          theme="vs-dark"
          options={{
            minimap: { enabled: false },
            fontSize: 14,
          }}
        />
      </div>
    </div>
  );
};

export default App;






*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Roboto", sans-serif;
  background: #f0f2f5;
  color: #333;
}

/* room join page CSS */
.join-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  animation: fadeIn 1s ease-in-out;
}

.join-form {
  background-color: rgba(255, 255, 255, 0.95);
  padding: 2.5rem;
  border-radius: 12px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  text-align: center;
  width: 320px;
  animation: slideDown 0.6s ease-in-out;
}

.join-form h1 {
  margin-bottom: 1.5rem;
  color: #333;
  font-size: 1.8rem;
}

.join-form input {
  width: 100%;
  padding: 0.8rem;
  margin-bottom: 1rem;
  border: 2px solid #ddd;
  border-radius: 6px;
  font-size: 1rem;
  outline: none;
  transition: border 0.3s ease;
}

.join-form input:focus {
  border-color: #764ba2;
}

.join-form button {
  width: 100%;
  padding: 0.8rem;
  background: linear-gradient(135deg, #4a90e2 0%, #357abd 100%);
  color: white;
  border: none;
  border-radius: 6px;
  font-size: 1rem;
  cursor: pointer;
  transition: transform 0.2s ease, background 0.3s ease;
}

.join-form button:hover {
  transform: scale(1.05);
  background: linear-gradient(135deg, #357abd 0%, #285a9c 100%);
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

@keyframes slideDown {
  from {
    transform: translateY(-20px);
    opacity: 0;
  }

  to {
    transform: translateY(0);
    opacity: 1;
  }
}

/* Editor - Container CSS */

.editor-container {
  display: flex;
  height: 100vh;
  background: linear-gradient(135deg, #2a2a72 0%, #009ffd 100%);
  padding: 0;
}


/* ðŸŒŸ Sidebar  CSS */

.sidebar {
  width: 250px;
  padding: 2rem 1rem;
  background: rgba(44, 62, 80, 0.95);
  backdrop-filter: blur(10px);
  color: #ecf0f1;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  box-shadow: 2px 0 10px rgba(0, 0, 0, 0.3);
  position: fixed;
  left: 0;
  top: 0;
  height: 100vh;
  justify-content: flex-start;
}

/* Leave Button  */
.leave-button {
  width: 90%;
  padding: 0.8rem;
  background: #e74c3c;
  color: white;
  border: none;
  border-radius: 6px;
  font-size: 1rem;
  cursor: pointer;
  margin-bottom: 20px;
  margin-top: 9px;
  transition: transform 0.2s ease, background 0.3s ease;
}

.leave-button:hover {
  transform: scale(1.05);
  background: #c0392b;
}


.room-info {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  margin-bottom: 20px;
}

.room-info h2 {
  font-size: 1.3rem;
  margin-bottom: 15px;
}

.copy-button {
  padding: 0.6rem 1rem;
  background: linear-gradient(135deg, #4a90e2 0%, #357abd 100%);
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: transform 0.2s ease, background 0.3s ease;
  width: 90%;
}

.copy-button:hover {
  transform: scale(1.05);
  background: linear-gradient(135deg, #357abd 0%, #285a9c 100%);
}


ul {
  list-style: none;
  padding: 0;
  width: 100%;
}

ul li {
  padding: 0.6rem;
  font-size: 1rem;
  background: rgba(255, 255, 255, 0.1);
  margin-top: 5px;
  border-radius: 8px;
  text-align: center;
  transition: background 0.3s ease;
}

ul li:hover {
  background: rgba(255, 255, 255, 0.2);
}


.typing-indicator {
  font-size: 1rem;
  color: #f1c40f;
  font-style: italic;
  margin-top: 10px;
}


.language-selector {
  margin-top: 1rem;
  width: 90%;
  padding: 0.75rem;
  background: rgba(52, 73, 94, 0.8);
  color: white;
  border: none;
  border-radius: 6px;
  text-align: center;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.3s ease;
}

.language-selector:hover {
  background: rgba(52, 73, 94, 1);
}

/* ðŸŽ¨ Code Editor Section */

.editor-wrapper {
  flex-grow: 1;
  margin-left: 250px;
  background: rgba(255, 255, 255, 0.95);
  border-radius: 0;
  box-shadow: none;
  padding: 1.5rem;
  transition: all 0.3s ease-in-out;
}

/* ðŸ’» Code Editor */
.editor-wrapper .monaco-editor {
  border-radius: 12px;
}

/* ðŸŽ¬ Smooth Fade-in Animation */
@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

.room-title {
  animation: fadeIn 0.8s ease-in-out;
}